*** UYGULAMA ***
	
	*-* JPA REPOSITORY'nin Projemizde Kullanabileceğimiz Interface Yapısı
	--> public interface UserRepository extends JpaRepository<User, Integer> {}

-------------------------------------------------------------------------------

*** Eşitlik Koşulu Anaktar Kelimeleri ***
	
	*-* name ismine eşit olan kayıtları listeler.
	--> List<User> findByName(String name); 
	-->	List<User> findByNameIs(String name); // Daha Anlaşılır Key.
	-->	List<User> findByNameEquals(String name); // Daha Anlaşılır Key.

	*-* name ismine eşit olmayan kayıtları listeler.
	-->	List<User> findByNameIsNot(String name);

	*-* Null değerine eşit kayıtları listeler. SQL IS NULL karşılık gelen key. 
	-->	List<User> findByNameIsNull();

	*-* Null olmayan kayıtları listeler.
	-->	List<User> findByNameIsNotNull();

	*-* Boolean tanımlamaları için true eşitlik kayıtlarını listeler.
	-->	List<User> findByActiveTrue();

	*-* Boolean tanımlamaları için false eşitlik kayıtlarını listeler.
	-->	List<User> findByActiveFalse();

-------------------------------------------------------------------------------

*** Benzerlik Koşul Anahtar Kelimeleri ***
	
	*-* prefix tümcesi ile başlayan kayıtları listeler.
	--> List<User> findByNameStartingWith(String prefix);

	*-* suffix tümcesi ile biten kayıtları listeler.
	-->	List<User> findByNameEndingWith(String suffix);

	*-* infix tümcesini içerisinde bulunduran kayıtları listeler.
	-->	List<User> findByNameContaining(String infix);

	*-* likePattern tümcesi ile ilk 3 koşulu bir arada kullanarak, koşulu sağlayan kayıtları listeler.
	--> List<User> findByNameLike(String likePattern);
	--> Example: 
	-->	String likePattern = "a%b%c";
	--> userRepository.findByNameLike(likePattern);

-------------------------------------------------------------------------------

*** Karşılaştırma Koşulu Anahtar Kelimeler ***
	
	*-* age Integer değişkenden küçük değerli kayıtları listeler.
	--> List<User> findByAgeLessThan(Integer age);
	
	*-* age Integer değişkenden küçük eşit değerli kayıtları listeler.
	-->	List<User> findByAgeLessThanEqual(Integer age);

	*-* age Integer değişkenden büyük değerli kayıtları listeler.
	-->	List<User> findByAgeGreaterThan(Integer age);
	
	*-* age Integer değişkenden büyük eşit değerli kayıtları listeler.
	--> List<User> findByAgeGreaterThanEqual(Integer age);

	*-* startAge ve endAge Integer değişkenlerinin arasında bir değere sahip kayıtları listeler.
	-->	List<User> findByAgeBetween(Integer startAge, Integer endAge);

	*-* ages Integer Collection'a eşit değerli kayıtları listeler.
	--> List<User> findByAgeIn(Collection<Integer> ages);

	*-* Date olarak tanımlanmış bir değişkenin, o tarihten sonra olan kayıtları listeler.
	--> List<User> findByBirthDateAfter(ZonedDateTime birthDate);
	
	*-* Date olarak tanımlanmış bir değişkenin, o tarihten önce olan kayıtları listeler.
	-->	List<User> findByBirthDateBefore(ZonedDateTime birthDate);

-------------------------------------------------------------------------------

*** Çoklu Koşul İfadeleri ***
	
	*-* Çok koşullu sorguları Or ile yönetip, koşulları sağlayan kayıtları listeler.
	--> List<User> findByNameOrBirthDate(String name, ZonedDateTime birthDate);

	*-* Çok koşullu sorguları And ile yönetip, koşulları sağlayan kayıtları listeler.
	--> List<User> findByNameAndBirthDate(String name, ZonedDateTime birthDate);

	*-* Çok koşullu sorguları Or ve And ile yönetip, koşulları sağlayan kayıtları listeler.
	--> List<User> findByNameOrBirthDateAndActive(String name, ZonedDateTime birthDate, Boolean active);
	
-------------------------------------------------------------------------------

*** Sonuçları Sıralama ***
	
	*-* name String tümcesine eşit olan kayıtları alfabetik sırada listeler.
	--> List<User> findByNameOrderByName(String name);
	--> List<User> findByNameOrderByNameAsc(String name);

	*-* name String tümcesine eşit olan kayıtları alfabetik sıranın tersi yönde listeler.
	--> List<User> findByNameOrderByNameDesc(String name);
	
-------------------------------------------------------------------------------

*** Eşit olan tek kayıtı bulmak. Primary Key değerlerinde kullanılır. ***
	
	*-* 1 numaralı id(PK) bulur. Spring Boot 1.X. versiyonun da kullanılıyordu.
	--> User user = userRepository.findOne(1);

	*-* 1 numaralı id(PK) bulur. Spring Boot 2.X. versiyonun da kullanılıyor.
	--> User user = userRepository.findById(1);
	
-------------------------------------------------------------------------------

Kaynak Kod : https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-repo